load("C:/Users/ous1/Desktop/Berkeley_Bootcamp/R_Analysis/01_Demo/.RData")
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy)) #create summary table
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
head(mpg)
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
head (mpg)
head(mpg_summary)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class)) #import dataset into ggplot2
head(mpg)
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer)) #create summary table
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n()) #create summary table with multiple columns
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
setwd("C:/Users/ous1/Desktop/Berkeley_Bootcamp/R_Analysis/01_Demo")
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
table <- table[,order(colnames(table))]
head(mpg)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n()) #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy)) #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive") #add scatter plot with multiple aesthetics
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy)) #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle
Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy)) #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ)) #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ))
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot with labels
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
shapiro.test(mtcars$wt)
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
> cor(used_matrix)
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
MechaCar_mpg <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
head(mechaCarMpg)
head(MechaCarMpg)
head(MechaCar_Mpg)
head(MechaCar_mpg)
names(MechaCar_mpg)[names(MechaCar_mpg)=="vehicle length"] <- "len"
names(MechaCar_mpg)[names(MechaCar_mpg)=="spoiler angle"] <- "angle"
lm(mpg ~ len + weight + angle + clear, data=MechaCar_mpg) #create linear model
names(MechaCar_mpg)[names(MechaCar_mpg)=="vehicle weight"] <- "weight"
lm(mpg ~ len + weight + angle + clear, data=MechaCar_mpg) #create linear model
names(MechaCar_mpg)[names(MechaCar_mpg)=="spoiler angle"] <- "angle"
names(MechaCar_mpg)[names(MechaCar_mpg)=="ground clearance"] <- "clear"
lm(mpg ~ len + weight + angle + clear, data=MechaCar_mpg) #create linear model
summary(lm(mpg ~ len + weight + angle + clear, data=MechaCar_mpg)) #summarize linear model
cor(MechaCar_mpg$mpg,MechaCar_mpg$len) #calculate correlation coefficient for length
cor(MechaCar_mpg$mpg,MechaCar_mpg$len) #calculate correlation coefficient for weight
cor(MechaCar_mpg$mpg,MechaCar_mpg$weight) #calculate correlation coefficient for weight
cor(MechaCar_mpg$mpg,MechaCar_mpg$angle) #calculate correlation coefficient for angle
cor(MechaCar_mpg$mpg,MechaCar_mpg$clear) #calculate correlation coefficient for clearance
plt <- ggplot(MechaCar_mpg,aes(x=len,y=mpg)) #import dataset into ggplot2
plt + geom_line()
model <- lm(mpg ~ len,MechaCar_mpg) #create linear model
yvals <- model$coefficients['len']*MechaCar_mpg$len + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Create same ggplot for ground clearance
plt <- ggplot(MechaCar_mpg,aes(x=clear,y=mpg)) #import dataset into ggplot2
plt + geom_line()
model <- lm(mpg ~ clear,MechaCar_mpg) #create linear model
yvals <- model$coefficients['clear']*MechaCar_mpg$clear + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
yvals <- model$coefficients['ground clearance']*MechaCar_mpg$clear + model$coefficients['(Intercept)'] #determine y-axis values from linear model
yvals <- model$coefficients['ground clearance']*MechaCar_mpg$clear + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
yvals <- model$coefficients['clear']*MechaCar_mpg$clear + model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
# Read suspension coil data
SuspensionCoil <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
head(SuspensionCoil)
summary(SuspensionCoil$PSI) # Summary
summary(SuspensionCoil$PSI) # Stats Summary
minPSI <- min(SuspensionCoil$PSI)
minPSI <- min(SuspensionCoil$PSI) # create metric for stats summary
maxPSI <- max(SuspensionCoil$PSI)
meanPSI <- mean(SuspensionCoil$PSI)
medPSI <- median(SuspensionCoil$PSI)
varPSI <- var(SuspensionCoil$PSI)
stdevPSI <- sd(SuspensionCoil$PSI)
library(tibble)
Stats_Labels = c("min","max","mean","median","variance","standard deviation")
Stats_Results = c(minPSI,maxPSI,meanPSI,medPSI,varPSI,stdevPSI )
Statistics_Table = tibble(statsLabels, statsResults)
Statistics_Table = tibble(Stats_Labels, Stats_Results)
Statistics_Table
plt <- ggplot(SuspensionCoil, aes(x=PSI)) # Plot ggplot
plt + geom_density()
plt + geom_density() # Visualize distribution using density plot
sample_table <- SuspensionCoil %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table, aes(x=PSI)) #import dataset into ggplot2
plt + geom_density() # Visualize distribution using density plot
t.test(sample_table$PSI),mu=mean(SuspensionCoil$PSI)) #compare sample versus population means
t.test(sample_table$PSI,mu=mean(SuspensionCoil$PSI)) #compare sample versus population means
